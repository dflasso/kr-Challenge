package ec.com.danylassosolution.users.controllers.v1;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ec.com.danylassosolution.users.models.constants.VaccinationState;
import ec.com.danylassosolution.users.models.dtos.EmployeeRegisterReq;
import ec.com.danylassosolution.users.models.dtos.EmployeeUpdateReq;
import ec.com.danylassosolution.users.models.entities.User;
import ec.com.danylassosolution.users.models.entities.Vaccines;
import ec.com.danylassosolution.users.services.models.FindUserById;
import ec.com.danylassosolution.users.services.models.FindUserByNumDocument;
import ec.com.danylassosolution.users.services.models.SaveAllAdress;
import ec.com.danylassosolution.users.services.models.SaveAllVaccines;
import ec.com.danylassosolution.users.services.models.SaveEmployee;
import ec.com.danylassosolution.users.services.models.UpdateEmployee;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/v1.0.0/employees")
@Api(tags = "Administracion de Empleados")
public class EmployeeController {
	
	@Autowired
	private SaveEmployee saveEmployee;
	
	@Autowired
	private UpdateEmployee updateEmployee;

	@Autowired
	private SaveAllVaccines saveAllVaccines;
	
	@Autowired
	private SaveAllAdress saveAllAdress;
	
	@Autowired
	private FindUserById findUserById;
	
	@Autowired
	private FindUserByNumDocument findUserByNumDocument;
	
	@GetMapping
	public Page<User> getAll(){
		return null;
	}
	
	@GetMapping("/{id}")
	public User getById(Long id){
		return findUserById.find(id);
	}
	
	@GetMapping("/{ci}/by-ci")
	@ApiOperation(value = "Encontrar un empleado")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "empleado existente"),
        @ApiResponse(code = 404, message = "No existen registros")
    })
	public User getById(String ci){
		return findUserByNumDocument.find(ci);
	}
	
	@PostMapping
	@ApiOperation(value = "Registrar un empleado")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "registro exitoso del empleado"),
        @ApiResponse(code = 409, message = "Cédula registrada previamente"),
        @ApiResponse(code = 500, message = "Error al registrar los datos")
    })
	public User create(@RequestBody @Validated EmployeeRegisterReq request) {
		return saveEmployee.create(request);
	}
	
	@PutMapping("/personal-information")
	@ApiOperation(value = "Actualizar un empleado")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "actualización exitosa del empleado"),
        @ApiResponse(code = 500, message = "Error al registrar los datos")
    })
	public User update(@RequestBody @Validated EmployeeUpdateReq request) {
		List<Vaccines> vaccines = request.getVaccines();
		User user = updateEmployee.update(request);
		
		if(user.getIsVaccinated().equals(VaccinationState.VACCINATED)){
			saveAllVaccines.saveAll(vaccines, user);	
		}
		
		saveAllAdress.saveAll(request.addressAsList(), user);
		
		return user;
	}
	
	@DeleteMapping("/{id}")
	public User deleteById(Long id){
		return null;
	}
}
